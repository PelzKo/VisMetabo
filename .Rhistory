# default is using Clique
param1 <- 13#c(2,5,8,11,14)
param2 <- c(0.2,0.9,0.8)#c(0.04,0.08,0.1,0.3)
combinations <- expand.grid(param1,param2)
for (row in 1:nrow(combinations)){
xi <- combinations[row,][[1]]
tau <- combinations[row,][[2]]
print(xi)
print(tau)
run <- tryCatch({
cliqueClust <- CLIQUE(smallMetab, xi = xi,tau = tau)
cliqueClust <- cliqueClust[order(unlist(lapply(lapply(cliqueClust, "[[", "subspace"),"sum")),decreasing = TRUE)]
nums <- unlist(lapply(lapply(cliqueClust, "[[", "subspace"),"sum"))
top5 <- nums[1:5]
top5Metabs <- list()
top5Diab <- rep(0.5,5)
for (i in 1:5){
currentCluster <- cliqueClust[as.numeric(i)][[1]]
top5Metabs[[i]] <- paste0(names(smallMetab)[currentCluster$subspace], collapse = "_")
top5Diab[i] <- mean(T2D[[1]][currentCluster$objects])
}
#realDiabs <- abs(0.5-top5Diab)
result[counter, ] <- list(paste(method,xi,tau,sep = "_"),paste0(top5Metabs,collapse = ";") ,top5Diab[[1]],top5Diab[[2]],top5Diab[[3]],top5Diab[[4]],top5Diab[[5]])
counter <- counter + 1
return(NA)
},
error = function(cond){
log <- c(paste(method,xi,tau,sep = "_"),cond$message,cond$call)
return(log)
})
if (run[[2]]!="keine Funktion abzubrechen, springe zum Top Level"){
logs <- c(logs,run)
}
#currentCombinationCounter <- currentCombinationCounter + 1
}
}
)
}
print(logs)
result <- result[complete.cases(result[[1]]),]
logsToWrite <- data.frame(matrix(unlist(logs), nrow=length(unlist(logs))/3, byrow=T))
sapply(logsToWrite, unlist)
write.table(result, file='output.tsv', quote = FALSE, row.names = FALSE, sep='\t')
write.table(logsToWrite, file='logs.tsv', quote = FALSE, row.names = FALSE, col.names = FALSE, sep='\t')
library(subspace)
source("C:\\Users\\Konstantin\\Desktop\\Uni\\6Semester\\BachelorArbeit\\code\\testdata.R")
N <- 1000  # total number of rows to preallocate--possibly an overestimate
result <- data.frame(name=rep(NA, N), dimNames=rep("", N),  # as many cols as you need
diab1=rep(NA, N),diab2=rep(NA, N),diab3=rep(NA, N),diab4=rep(NA, N),
diab5=rep(NA, N))
logs <- list()
small <- getData()
smallMetab <- small[[1]]
smallPheno <- small[[2]]
T2D <- smallPheno["T2D"]
#big <- getData(FALSE)
#bigMetab <- big[[1]]
#bigPheno <- big[[2]]
counter<-1
currentCombinationCounter <- 1
for (method in c("clique","som","cosa","doc")){
switch(method,
som={
},
cosa={
},
doc={
},
{
# default is using Clique
param1 <- 13#c(2,5,8,11,14)
param2 <- c(0.2,0.9,0.8)#c(0.04,0.08,0.1,0.3)
combinations <- expand.grid(param1,param2)
for (row in 1:nrow(combinations)){
xi <- combinations[row,][[1]]
tau <- combinations[row,][[2]]
print(xi)
print(tau)
run <- tryCatch({
cliqueClust <- CLIQUE(smallMetab, xi = xi,tau = tau)
cliqueClust <- cliqueClust[order(unlist(lapply(lapply(cliqueClust, "[[", "subspace"),"sum")),decreasing = TRUE)]
nums <- unlist(lapply(lapply(cliqueClust, "[[", "subspace"),"sum"))
top5 <- nums[1:5]
top5Metabs <- list()
top5Diab <- rep(0.5,5)
for (i in 1:5){
currentCluster <- cliqueClust[as.numeric(i)][[1]]
top5Metabs[[i]] <- paste0(names(smallMetab)[currentCluster$subspace], collapse = "_")
top5Diab[i] <- mean(T2D[[1]][currentCluster$objects])
}
#realDiabs <- abs(0.5-top5Diab)
result[counter, ] <- list(paste(method,xi,tau,sep = "_"),paste0(top5Metabs,collapse = ";") ,top5Diab[[1]],top5Diab[[2]],top5Diab[[3]],top5Diab[[4]],top5Diab[[5]])
counter <- counter + 1
return(NA)
},
error = function(cond){
log <- c(paste(method,xi,tau,sep = "_"),cond$message,cond$call)
return(log)
})
if (run[[2]]!="keine Funktion abzubrechen, springe zum Top Level"){
logs <- c(logs,run)
}
#currentCombinationCounter <- currentCombinationCounter + 1
}
}
)
}
print(logs)
result <- result[complete.cases(result[[1]]),]
logsToWrite <- data.frame(matrix(unlist(logs), nrow=length(unlist(logs))/3, byrow=T))
sapply(logsToWrite, unlist)
sapply(logsToWrite, class)
write.table(result, file='output.tsv', quote = FALSE, row.names = FALSE, sep='\t')
write.table(logsToWrite, file='logs.tsv', quote = FALSE, row.names = FALSE, col.names = FALSE, sep='\t')
unlist(logs)
class(unlist(logs))
logs
unlist(logs)
library(subspace)
source("C:\\Users\\Konstantin\\Desktop\\Uni\\6Semester\\BachelorArbeit\\code\\testdata.R")
N <- 1000  # total number of rows to preallocate--possibly an overestimate
result <- data.frame(name=rep(NA, N), dimNames=rep("", N),  # as many cols as you need
diab1=rep(NA, N),diab2=rep(NA, N),diab3=rep(NA, N),diab4=rep(NA, N),
diab5=rep(NA, N))
logs <- list()
small <- getData()
smallMetab <- small[[1]]
smallPheno <- small[[2]]
T2D <- smallPheno["T2D"]
#big <- getData(FALSE)
#bigMetab <- big[[1]]
#bigPheno <- big[[2]]
counter<-1
currentCombinationCounter <- 1
for (method in c("clique","som","cosa","doc")){
switch(method,
som={
},
cosa={
},
doc={
},
{
# default is using Clique
param1 <- 13#c(2,5,8,11,14)
param2 <- c(0.2,0.9,0.8)#c(0.04,0.08,0.1,0.3)
combinations <- expand.grid(param1,param2)
for (row in 1:nrow(combinations)){
xi <- combinations[row,][[1]]
tau <- combinations[row,][[2]]
print(xi)
print(tau)
run <- tryCatch({
cliqueClust <- CLIQUE(smallMetab, xi = xi,tau = tau)
cliqueClust <- cliqueClust[order(unlist(lapply(lapply(cliqueClust, "[[", "subspace"),"sum")),decreasing = TRUE)]
nums <- unlist(lapply(lapply(cliqueClust, "[[", "subspace"),"sum"))
top5 <- nums[1:5]
top5Metabs <- list()
top5Diab <- rep(0.5,5)
for (i in 1:5){
currentCluster <- cliqueClust[as.numeric(i)][[1]]
top5Metabs[[i]] <- paste0(names(smallMetab)[currentCluster$subspace], collapse = "_")
top5Diab[i] <- mean(T2D[[1]][currentCluster$objects])
}
#realDiabs <- abs(0.5-top5Diab)
result[counter, ] <- list(paste(method,xi,tau,sep = "_"),paste0(top5Metabs,collapse = ";") ,top5Diab[[1]],top5Diab[[2]],top5Diab[[3]],top5Diab[[4]],top5Diab[[5]])
counter <- counter + 1
return(NA)
},
error = function(cond){
log <- c(paste(method,xi,tau,sep = "_"),cond$message,cond$call)
print(log)
return(log)
})
if (run[[2]]!="keine Funktion abzubrechen, springe zum Top Level"){
logs <- c(logs,run)
}
#currentCombinationCounter <- currentCombinationCounter + 1
}
}
)
}
print(logs)
result <- result[complete.cases(result[[1]]),]
logsToWrite <- data.frame(matrix(unlist(logs), nrow=length(unlist(logs))/3, byrow=T))
sapply(logsToWrite, unlist)
sapply(logsToWrite, class)
write.table(result, file='output.tsv', quote = FALSE, row.names = FALSE, sep='\t')
write.table(logsToWrite, file='logs.tsv', quote = FALSE, row.names = FALSE, col.names = FALSE, sep='\t')
library(subspace)
source("C:\\Users\\Konstantin\\Desktop\\Uni\\6Semester\\BachelorArbeit\\code\\testdata.R")
N <- 1000  # total number of rows to preallocate--possibly an overestimate
result <- data.frame(name=rep(NA, N), dimNames=rep("", N),  # as many cols as you need
diab1=rep(NA, N),diab2=rep(NA, N),diab3=rep(NA, N),diab4=rep(NA, N),
diab5=rep(NA, N))
logs <- list()
small <- getData()
smallMetab <- small[[1]]
smallPheno <- small[[2]]
T2D <- smallPheno["T2D"]
#big <- getData(FALSE)
#bigMetab <- big[[1]]
#bigPheno <- big[[2]]
counter<-1
currentCombinationCounter <- 1
for (method in c("clique","som","cosa","doc")){
switch(method,
som={
},
cosa={
},
doc={
},
{
# default is using Clique
param1 <- 13#c(2,5,8,11,14)
param2 <- c(0.2,0.9,0.8)#c(0.04,0.08,0.1,0.3)
combinations <- expand.grid(param1,param2)
for (row in 1:nrow(combinations)){
xi <- combinations[row,][[1]]
tau <- combinations[row,][[2]]
print(xi)
print(tau)
run <- tryCatch({
cliqueClust <- CLIQUE(smallMetab, xi = xi,tau = tau)
cliqueClust <- cliqueClust[order(unlist(lapply(lapply(cliqueClust, "[[", "subspace"),"sum")),decreasing = TRUE)]
nums <- unlist(lapply(lapply(cliqueClust, "[[", "subspace"),"sum"))
top5 <- nums[1:5]
top5Metabs <- list()
top5Diab <- rep(0.5,5)
for (i in 1:5){
currentCluster <- cliqueClust[as.numeric(i)][[1]]
top5Metabs[[i]] <- paste0(names(smallMetab)[currentCluster$subspace], collapse = "_")
top5Diab[i] <- mean(T2D[[1]][currentCluster$objects])
}
#realDiabs <- abs(0.5-top5Diab)
result[counter, ] <- list(paste(method,xi,tau,sep = "_"),paste0(top5Metabs,collapse = ";") ,top5Diab[[1]],top5Diab[[2]],top5Diab[[3]],top5Diab[[4]],top5Diab[[5]])
counter <- counter + 1
return(NA)
},
error = function(cond){
log <- c(paste(method,xi,tau,sep = "_"),cond$message,cond$call)
print(class(cond$call))
return(log)
})
if (run[[2]]!="keine Funktion abzubrechen, springe zum Top Level"){
logs <- c(logs,run)
}
#currentCombinationCounter <- currentCombinationCounter + 1
}
}
)
}
print(logs)
result <- result[complete.cases(result[[1]]),]
logsToWrite <- data.frame(matrix(unlist(logs), nrow=length(unlist(logs))/3, byrow=T))
sapply(logsToWrite, unlist)
sapply(logsToWrite, class)
write.table(result, file='output.tsv', quote = FALSE, row.names = FALSE, sep='\t')
write.table(logsToWrite, file='logs.tsv', quote = FALSE, row.names = FALSE, col.names = FALSE, sep='\t')
library(subspace)
source("C:\\Users\\Konstantin\\Desktop\\Uni\\6Semester\\BachelorArbeit\\code\\testdata.R")
N <- 1000  # total number of rows to preallocate--possibly an overestimate
result <- data.frame(name=rep(NA, N), dimNames=rep("", N),  # as many cols as you need
diab1=rep(NA, N),diab2=rep(NA, N),diab3=rep(NA, N),diab4=rep(NA, N),
diab5=rep(NA, N))
logs <- list()
small <- getData()
smallMetab <- small[[1]]
smallPheno <- small[[2]]
T2D <- smallPheno["T2D"]
#big <- getData(FALSE)
#bigMetab <- big[[1]]
#bigPheno <- big[[2]]
counter<-1
currentCombinationCounter <- 1
for (method in c("clique","som","cosa","doc")){
switch(method,
som={
},
cosa={
},
doc={
},
{
# default is using Clique
param1 <- 13#c(2,5,8,11,14)
param2 <- c(0.2,0.9,0.8)#c(0.04,0.08,0.1,0.3)
combinations <- expand.grid(param1,param2)
for (row in 1:nrow(combinations)){
xi <- combinations[row,][[1]]
tau <- combinations[row,][[2]]
print(xi)
print(tau)
run <- tryCatch({
cliqueClust <- CLIQUE(smallMetab, xi = xi,tau = tau)
cliqueClust <- cliqueClust[order(unlist(lapply(lapply(cliqueClust, "[[", "subspace"),"sum")),decreasing = TRUE)]
nums <- unlist(lapply(lapply(cliqueClust, "[[", "subspace"),"sum"))
top5 <- nums[1:5]
top5Metabs <- list()
top5Diab <- rep(0.5,5)
for (i in 1:5){
currentCluster <- cliqueClust[as.numeric(i)][[1]]
top5Metabs[[i]] <- paste0(names(smallMetab)[currentCluster$subspace], collapse = "_")
top5Diab[i] <- mean(T2D[[1]][currentCluster$objects])
}
#realDiabs <- abs(0.5-top5Diab)
result[counter, ] <- list(paste(method,xi,tau,sep = "_"),paste0(top5Metabs,collapse = ";") ,top5Diab[[1]],top5Diab[[2]],top5Diab[[3]],top5Diab[[4]],top5Diab[[5]])
counter <- counter + 1
return(NA)
},
error = function(cond){
log <- c(paste(method,xi,tau,sep = "_"),cond$message,toString(cond$call))
print(log)
return(log)
})
if (run[[2]]!="keine Funktion abzubrechen, springe zum Top Level"){
logs <- c(logs,run)
}
#currentCombinationCounter <- currentCombinationCounter + 1
}
}
)
}
print(logs)
result <- result[complete.cases(result[[1]]),]
logsToWrite <- data.frame(matrix(unlist(logs), nrow=length(unlist(logs))/3, byrow=T))
#sapply(logsToWrite, unlist)
#sapply(logsToWrite, class)
write.table(result, file='output.tsv', quote = FALSE, row.names = FALSE, sep='\t')
write.table(logsToWrite, file='logs.tsv', quote = FALSE, row.names = FALSE, col.names = FALSE, sep='\t')
source("C:\\Users\\Konstantin\\Desktop\\Uni\\6Semester\\BachelorArbeit\\code\\doc.R")
param1 <- 0.2#c(0.1,0.2,0.4)
param2 <- 0.8#c(0.25,0.5,0.75)
row <- 1
alpha <- combinations[row,][[1]]
beta <- combinations[row,][[2]]
w <- 0.05
param1 <- 0.2#c(0.1,0.2,0.4)
param2 <- 0.8#c(0.25,0.5,0.75)
combinations <- expand.grid(param1,param2)
alpha <- combinations[row,][[1]]
beta <- combinations[row,][[2]]
w <- 0.05
docClust <- runDoc(smallMetab, alpha, beta, w)
source("C:\\Users\\Konstantin\\Desktop\\Uni\\6Semester\\BachelorArbeit\\code\\doc.R")
docClust <- runDoc(smallMetab, alpha, beta, w)
cliqueClust <- cliqueClust[order(unlist(lapply(lapply(cliqueClust, "[[", "subspace"),"sum")),decreasing = TRUE)]
docClust <- runDoc(smallMetab, alpha, beta, w)
source("C:\\Users\\Konstantin\\Desktop\\Uni\\6Semester\\BachelorArbeit\\code\\doc.R")
source("C:\\Users\\Konstantin\\Desktop\\Uni\\6Semester\\BachelorArbeit\\code\\doc.R")
source("C:\\Users\\Konstantin\\Desktop\\Uni\\6Semester\\BachelorArbeit\\code\\doc.R")
docClust <- runDoc(smallMetab, alpha, beta, w)
getwd()
setwd("C:\\Users\\Konstantin\\Desktop\\Uni\\6Semester\\BachelorArbeit\\code")
getwd()
docClust <- runDoc(smallMetab, alpha, beta, w)
docClust <- runDoc(smallMetab, alpha, beta, w)
docClust <- runDoc(smallMetab, alpha, beta, w)
docClust <- runDoc(smallMetab, alpha, beta, w)
.rs.restartR()
source("C:\\Users\\Konstantin\\Desktop\\Uni\\6Semester\\BachelorArbeit\\code\\testdata.R")
source("C:\\Users\\Konstantin\\Desktop\\Uni\\6Semester\\BachelorArbeit\\code\\doc.R")
docClust <- runDoc(smallMetab, alpha, beta, w)
idsInClustersDoc <- getIdsDoc(docClust)
dims <- getDimsDoc(docClust)
dims
param1 <- 0.2#c(0.1,0.2,0.4)
param2 <- 0.4#c(0.25,0.5,0.75)
combinations <- expand.grid(param1,param2)
alpha <- combinations[row,][[1]]
beta <- combinations[row,][[2]]
w <- 0.05
docClust <- runDoc(smallMetab, alpha, beta, w)
idsInClustersDoc <- getIdsDoc(docClust)
dims <- getDimsDoc(docClust)
param1 <- 0.4#c(0.1,0.2,0.4)
param2 <- 0.25#c(0.25,0.5,0.75)
combinations <- expand.grid(param1,param2)
alpha <- combinations[row,][[1]]
beta <- combinations[row,][[2]]
w <- 0.05
docClust <- runDoc(smallMetab, alpha, beta, w)
idsInClustersDoc <- getIdsDoc(docClust)
dims <- getDimsDoc(docClust)
param1 <- 0.9#c(0.1,0.2,0.4)
param2 <- 0.25#c(0.25,0.5,0.75)
combinations <- expand.grid(param1,param2)
alpha <- combinations[row,][[1]]
beta <- combinations[row,][[2]]
w <- 0.05
docClust <- runDoc(smallMetab, alpha, beta, w)
idsInClustersDoc <- getIdsDoc(docClust)
dims <- getDimsDoc(docClust)
param1 <- 100#c(0.1,0.2,0.4)
param2 <- 0.25#c(0.25,0.5,0.75)
combinations <- expand.grid(param1,param2)
alpha <- combinations[row,][[1]]
beta <- combinations[row,][[2]]
w <- 0.05
docClust <- runDoc(smallMetab, alpha, beta, w)
.rs.restartR()
docClust <- runDoc(smallMetab, alpha, beta, w)
param1 <- 20#c(0.1,0.2,0.4)
param2 <- 0.25#c(0.25,0.5,0.75)
combinations <- expand.grid(param1,param2)
alpha <- combinations[row,][[1]]
beta <- combinations[row,][[2]]
w <- 0.05
docClust <- runDoc(smallMetab, alpha, beta, w)
.rs.restartR()
docClust <- runDoc(smallMetab, alpha, beta, w)
param1 <- 10#c(0.1,0.2,0.4)
param2 <- 0.25#c(0.25,0.5,0.75)
combinations <- expand.grid(param1,param2)
alpha <- combinations[row,][[1]]
beta <- combinations[row,][[2]]
w <- 0.05
docClust <- runDoc(smallMetab, alpha, beta, w)
.rs.restartR()
docClust <- runDoc(smallMetab, alpha, beta, w)
param1 <- 1#c(0.1,0.2,0.4)
param2 <- 0.25#c(0.25,0.5,0.75)
combinations <- expand.grid(param1,param2)
alpha <- combinations[row,][[1]]
beta <- combinations[row,][[2]]
w <- 0.05
docClust <- runDoc(smallMetab, alpha, beta, w)
param1 <- 0.6#c(0.1,0.2,0.4)
param2 <- 0.25#c(0.25,0.5,0.75)
combinations <- expand.grid(param1,param2)
alpha <- combinations[row,][[1]]
beta <- combinations[row,][[2]]
w <- 0.05
docClust <- runDoc(smallMetab, alpha, beta, w)
idsInClustersDoc <- getIdsDoc(docClust)
dims <- getDimsDoc(docClust)
param1 <- 0.6#c(0.1,0.2,0.4)
param2 <- 0.25#c(0.25,0.5,0.75)
combinations <- expand.grid(param1,param2)
alpha <- combinations[row,][[1]]
beta <- combinations[row,][[2]]
w <- 0.5
docClust <- runDoc(smallMetab, alpha, beta, w)
idsInClustersDoc <- getIdsDoc(docClust)
dims <- getDimsDoc(docClust)
idsInClustersDoc <- getIdsDoc(docClust)
rm(idsInClustersDoc)
idsInClustersDoc <- getIdsDoc(docClust)
alpha <- 0.9#combinations[row,][[1]]
beta <- 0.1#combinations[row,][[2]]
w <- 0.5
docClust <- runDoc(smallMetab, alpha, beta, w)
idsInClustersDoc <- getIdsDoc(docClust)
dims <- getDimsDoc(docClust)
alpha <- 1#combinations[row,][[1]]
beta <- 0.1#combinations[row,][[2]]
w <- 0.5
docClust <- runDoc(smallMetab, alpha, beta, w)
idsInClustersDoc <- getIdsDoc(docClust)
dims <- getDimsDoc(docClust)
alpha <- 3#combinations[row,][[1]]
beta <- 0.1#combinations[row,][[2]]
w <- 0.5
docClust <- runDoc(smallMetab, alpha, beta, w)
alpha <- 2#combinations[row,][[1]]
beta <- 0.1#combinations[row,][[2]]
w <- 0.5
docClust <- runDoc(smallMetab, alpha, beta, w)
alpha <- 0.9#combinations[row,][[1]]
beta <- 0.1#combinations[row,][[2]]
w <- 5
docClust <- runDoc(smallMetab, alpha, beta, w)
idsInClustersDoc <- getIdsDoc(docClust)
dims <- getDimsDoc(docClust)
dims
alpha <- 0.9#combinations[row,][[1]]
beta <- 0.1#combinations[row,][[2]]
w <- 10
docClust <- runDoc(smallMetab, alpha, beta, w)
idsInClustersDoc <- getIdsDoc(docClust)
dims <- getDimsDoc(docClust)
alpha <- 0.9#combinations[row,][[1]]
beta <- 0.1#combinations[row,][[2]]
w <- 15
docClust <- runDoc(smallMetab, alpha, beta, w)
idsInClustersDoc <- getIdsDoc(docClust)
dims <- getDimsDoc(docClust)
idsInClustersDoc
dims
alpha <- 0.1#combinations[row,][[1]]
beta <- 0.25#combinations[row,][[2]]
w <- 15
docClust <- runDoc(smallMetab, alpha, beta, w)
idsInClustersDoc <- getIdsDoc(docClust)
dims <- getDimsDoc(docClust)
idsInClustersDoc
library(kohonen)
param1 <- 25#c(25,49,100)
param2 <- 50#c(50,100,200)
param3 <- c(0.05,0.01)#c(c(0.05,0.01), c(0.08,0.01), c(0.05,0.001))
combinations <- expand.grid(param1,param2,param3)
gridSize <- combinations[row,][[1]]
rlen <- combinations[row,][[2]]
alpha <- combinations[row,][[3]]
combinations[1,]
combinations
param1 <- 25#c(25,49,100)
param2 <- 50#c(50,100,200)
param3 <- list(0.05,0.01)#c(c(0.05,0.01), c(0.08,0.01), c(0.05,0.001))
combinations <- expand.grid(param1,param2,param3)
combinations
