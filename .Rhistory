phenotype[phenotype < quantile(phenotype,prob=n/100)]
quantile(phenotype,prob=n/100)
quantile(phenotype,prob=1-n/100)
phenotype[phenotype < quantile(phenotype,prob=n/100)]
min(phenotype[phenotype < quantile(phenotype,prob=n/100)])
max(phenotype[phenotype < quantile(phenotype,prob=n/100)])
phenotype
runApp('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code')
min(phenotype[phenotype >= quantile(phenotype,prob=1-n/100)])
max(phenotype[phenotype <= quantile(phenotype,prob=n/100)])
runApp('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code')
runApp('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code')
runApp('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code')
runApp('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code')
runApp('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code')
runApp('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code')
runApp('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code')
runApp('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code')
runApp('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code')
runApp('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code')
dataNoNa[tempId]
dataNoNa[tempId]
unique(dataNoNa[tempId])
length(dataNoNa[tempId])!=length(unique(dataNoNa[tempId]))
length(dataNoNa[tempId])
length(dataNoNa[[tempId]])
runApp('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code')
runApp('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code')
runApp('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code')
dataNoNa[[input$idField[[1]]]]
dataNoNa[[input$idField
]]
dataNoNa[[input$idField]]
dataNoNa[[as.numeric(input$idField)]]
runApp('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code')
runApp('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code')
runApp('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code')
f
s
n
n
n
n
n
n
c
Q
runApp('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code')
runApp()
runApp('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code')
library(shiny)
runApp('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code')
runApp('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code')
runApp()
runApp('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code')
input$externalPheno[[1]]&&!is.null(input$inputPheno)
readPhenoFile(input$inputPheno$datapath)
names(dataNoNa)[[tempId]]
test <- merge(dataNoNa, readPhenoFile(input$inputPheno$datapath), by = names(dataNoNa)[[tempId]])
test
dataNoNa
data <- readPhenoFile(input$inputPheno$datapath)
data["QMDiab-ID"]
dataNoNa["QMDiab-ID"]
merge(data["QMDiab-ID"],dataNoNa["QMDiab-ID"])
runApp('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code')
test <- merge(dataNoNa, readPhenoFile(input$inputPheno$datapath), by = names(dataNoNa)[[tempId]])
data()$values
runApp('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code')
runApp()
runApp('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code')
length(dataNoNaTemp)
nrow(dataNoNaTemp)
runApp('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code')
runApp()
runApp('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code')
runApp('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code')
shiny::runApp('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code')
runApp('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code')
colorRampPalette(c('dark red','white','dark blue'))
colorRampPalette(c('dark red','white','dark blue'),
space = "Lab")
colorRampPalette(c('dark red','white','dark blue'),
space = "rgb")
shiny::runApp('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code')
## Interpolating a 'sequential' ColorBrewer palette
YlOrBr <- c("#FFFFD4", "#FED98E", "#FE9929", "#D95F0E", "#993404")
filled.contour(volcano, color = colorRampPalette(YlOrBr,space="Lab"), asp = 1)
m<-outer(1:20,1:20,function(x,y) sin(sqrt(x*y)/3))
rgb.palette<-colorRampPalette(c("red","orange","blue"), space="rgb")
Lab.palette<-colorRampPalette(c("red","orange","blue"), space="Lab")
filled.contour(m,col=rgb.palette(20))
filled.contour(m,col=Lab.palette(20))
rgb.palette(10)
rgb.palette(200)
runApp('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code')
runApp('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code')
filled.contour(m,col=Lab.palette(20))
filled.contour(m,col=rgb.palette(20))
Lab.palette<-colorRampPalette(c("dark red","white","dark blue"), space="Lab")
filled.contour(m,col=Lab.palette(20))
Lab.palette<-colorRampPalette(c("red","white","blue"), space="Lab")
filled.contour(m,col=Lab.palette(20))
result <- phenotype
result <- "#FFFFD4"
result <- phenotype
result[TRUE] <- phenotype
result[TRUE] <- "#FFFFD4"
result[] <- "#FFFFD4"
result <- phenotype
result[] <- "#FFFFD4"
vecToCol <- function(data, colors){
result <- data
result[] <- colors[length(colors)]
range = max(data)-min(data)
intervals = range/length(colors)
lastValue = -Inf
counter = 1
for (i in seq(min(data), max(data), by=intervals)){
result[data>lastValue&&data<=i] <- colors[counter]
lastValue <- i
counter <- counter + 1
}
}
runApp('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code')
runApp('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code')
runApp('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code')
data>lastValue&&data<=i
data>lastValue
data<=i
data>lastValue[data<=i]
data>lastValue&&data<=i
data>lastValue&data<=i
runApp('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code')
result[data>lastValue&data<=i]
data>lastValue&data<=i
colors[counter]
result[data>lastValue&data<=i]
result[data>lastValue&data<=i]
result[data>lastValue&data<=i]
runApp('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code')
colors[length(colors)]
length(colors)
runApp('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code')
runApp('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code')
runApp('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code')
colorPalette <-colorRampPalette(c("red","white","blue"), space="Lab")(15)
sprintf("<div style='background-color: "+colorPalette[length(colorPalette)]+";height: 18px;width: 18px;float: left;margin-right: 3px;'></div> Min:")
runApp('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code')
runApp('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code')
runApp('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code')
runApp('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code')
runApp('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code')
clusterInfo$visualisation$layout
test <- cbind(read.table(clusterInfo$visualisation$layout))
test <- data.frame(x=clusterInfo$visualisation$layout[1,],y=clusterInfo$visualisation$layout[2,])
test <- data.frame(x=clusterInfo$visualisation$layout[,1],y=clusterInfo$visualisation$layout[,2])
runApp('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code')
shiny::runApp('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code')
install.packages('devtools');
devtools::install_github('mkampert/rCOSA')
runApp('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code')
install.packages('devtools');
devtools::install_github('mkampert/rCOSA')
devtools::install_github('mkampert/rCOSA')
shiny::runApp('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code')
devtools::install_github('mkampert/rCOSA')
install.packages("backports")
devtools::install_github('mkampert/rCOSA')
runApp('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code')
runApp('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code')
runApp('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code')
runApp('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code')
runApp('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code')
runApp('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code')
runApp('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code')
data()$values
runApp('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code')
inputData[c(tempStart:tempEnd)]
class(finalValues$metab)
finalValues$metab
scale(finalValues$metab)
class(finalValues$metab)
class(metabComplete)
class(scale(finalValues$metab))
scale(finalValues$metab)
data.frame(scale(finalValues$metab))
runApp('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code')
runApp('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code')
library(subspace)
#Load the example dataset for this package
data("subspace_dataset")
#Load the true clustering for this dataset
path_to_clustering <- paste(path.package("subspace"),"/extdata/subspace_dataset.true",sep="")
clustering <- clustering_from_file(file_path=path_to_clustering)
#also generate a clustering with one of the algorithms
clustering2 <- CLIQUE(subspace_dataset,tau=0.2)
#now plot the generated clustering
plot(clustering2,subspace_dataset)
#plot the true clustering with small points
plot(clustering,subspace_dataset,size=0.1)
#Now plot the points with a different shape.
#This requires the workaround that was discussed in "Notes"
p <- ggvis::prop(property="shape",x="cross")
plot(clustering,subspace_dataset,props=p)
shiny::runApp('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code')
runApp('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code')
testdata <- function(){
data <- readFile("C:/UsersKonstantin/Desktop/Uni/6Semester/BachelorArbeit/BeispielDaten/metabExampleMaleFemale.xlsx")
inputData <- data[complete.cases(data()$values), ]
tempId <- 1
tempStart <- 4
tempEnd <- 18
id <- inputData[[tempId]]
metab <- inputData[c(tempStart:tempEnd)]
pheno <- inputData[-c(tempId,c(tempStart:tempEnd))]
pheno$None <- numeric(length(finalValues$id[[1]]))
metabComplete <- data.frame(scale(metab))
metabComplete
}
test <- testdata()
runApp('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code')
input$inputData$datapath
test <- testdata()
test <- testdata()
test <- testdata()
testdata <- function(){
data <- readFile("C:\\Users\\Konstantin\\Desktop\\Uni\\6Semester\\BachelorArbeit\\BeispielDaten\\metabExampleMaleFemale.xlsx")
inputData <- data[complete.cases(data()$values), ]
tempId <- 1
tempStart <- 4
tempEnd <- 18
id <- inputData[[tempId]]
metab <- inputData[c(tempStart:tempEnd)]
pheno <- inputData[-c(tempId,c(tempStart:tempEnd))]
pheno$None <- numeric(length(finalValues$id[[1]]))
metabComplete <- data.frame(scale(metab))
metabComplete
}
test <- testdata()
testdata <- function(){
data <- readFile("C:\\Users\\Konstantin\\Desktop\\Uni\\6Semester\\BachelorArbeit\\BeispielDaten\\metabExampleMaleFemale.xlsx")
inputData <- data[complete.cases(data), ]
tempId <- 1
tempStart <- 4
tempEnd <- 18
id <- inputData[[tempId]]
metab <- inputData[c(tempStart:tempEnd)]
pheno <- inputData[-c(tempId,c(tempStart:tempEnd))]
pheno$None <- numeric(length(id[[1]]))
metabComplete <- data.frame(scale(metab))
metabComplete
}
test <- testdata()
debugSource('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code/Clustering.R')
testdata <- function(){
data <- readFile("C:\\Users\\Konstantin\\Desktop\\Uni\\6Semester\\BachelorArbeit\\BeispielDaten\\metabExampleMaleFemale.xlsx")
inputData <- data[complete.cases(data), ]
tempId <- 1
tempStart <- 4
tempEnd <- 18
id <- inputData[[tempId]]
metab <- inputData[c(tempStart:tempEnd)]
pheno <- inputData[-c(tempId,c(tempStart:tempEnd))]
pheno$None <- numeric(length(id[[1]]))
metabComplete <- data.frame(scale(metab))
metabComplete
}
debugSource('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code/testdata.R')
debugSource('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code/testdata.R')
test <- testdata()
testdata <- function(){
data <- readFile("C:\\Users\\Konstantin\\Desktop\\Uni\\6Semester\\BachelorArbeit\\BeispielDaten\\metabExampleMaleFemale.xlsx")
inputData <- data$values[complete.cases(data$values), ]
tempId <- 1
tempStart <- 4
tempEnd <- 18
id <- inputData[[tempId]]
metab <- inputData[c(tempStart:tempEnd)]
pheno <- inputData[-c(tempId,c(tempStart:tempEnd))]
pheno$None <- numeric(length(id[[1]]))
metabComplete <- data.frame(scale(metab))
metabComplete
}
test <- testdata()
pca_data <- prcomp(test, scale. = TRUE)
testdata <- function(){
data <- readFile("C:\\Users\\Konstantin\\Desktop\\Uni\\6Semester\\BachelorArbeit\\BeispielDaten\\metabExampleMaleFemale.xlsx")
inputData <- data$values[complete.cases(data$values), ]
tempId <- 1
tempStart <- 4
tempEnd <- 18
id <- inputData[[tempId]]
metab <- inputData[c(tempStart:tempEnd)]
pheno <- inputData[-c(tempId,c(tempStart:tempEnd))]
pheno$None <- numeric(length(id[[1]]))
metabComplete <- data.frame(scale(metab))
metabComplete
}
som(testdata())
library(shiny)
library(subspace)
library(ggplot2)
library(ggfortify)
library(rCOSA)
library(kohonen)
test <- testdata()
library("openxlsx")
library("openxlsx")
test <- testdata()
som(test)
matrix <- data.matrix(test)
som(matrix)
somData <- som (matrix)
plot(somData)
plot(somData, type="mapping", classif=predict(clusteringData$SOM), pchs = c(1,2,3,4,5))
plot(somData, type="mapping", classif=predict(somData), pchs = c(1,2,3,4,5))
plot(somData, type="dist.neighbours"
)
data(wines)
View(wines)
set.seed(7)
kohmap <- xyf(scale(wines), vintages,grid = somgrid(5, 5, "hexagonal"), rlen=100)
plot(kohmap, type="changes")
counts <- plot(kohmap, type="counts", shape = "straight")
## show both sets of codebook vectors in the map
par(mfrow = c(1,2))
plot(kohmap, type="codes", main = c("Codes X", "Codes Y"))
View(wines)
par(mfrow = c(1,1))
similarities <- plot(kohmap, type="quality", palette.name = terrain.colors)
plot(kohmap, type="mapping",labels = as.integer(vintages), col = as.integer(vintages),main = "mapping plot")
View(wines)
vintages
similarities
length(vintages)
length(wines)
seq_len(177)
plot(kohmap, type="mapping",labels = seq_len(177), col = seq_len(177),main = "mapping plot")
## add background colors to units according to their predicted class labels
xyfpredictions <- classmat2classvec(getCodes(kohmap, 2))bgcols <- c("gray", "pink", "lightgreen")
## add background colors to units according to their predicted class labels
xyfpredictions <- classmat2classvec(getCodes(kohmap, 2))
bgcols <- c("gray", "pink", "lightgreen")
plot(kohmap, type="mapping", col = as.integer(vintages),pchs = as.integer(vintages), bgcol = bgcols[as.integer(xyfpredictions)],main = "another mapping plot", shape = "straight", border = NA)
## Show'component planes'
set.seed(7)
sommap <- som(scale(wines), grid = somgrid(6, 4, "hexagonal"))
plot(sommap, type = "property", property = getCodes(sommap, 1)[,1],main = colnames(getCodes(sommap, 1))[1])
## Show the U matrix
Umat <- plot(sommap, type="dist.neighbours", main = "SOM neighbour distances")
## use hierarchical clustering to cluster the codebook vectors
som.hc <- cutree(hclust(object.distances(sommap, "codes")), 5)
add.cluster.boundaries(sommap, som.hc)
## and the same for rectangular maps
set.seed(7)
sommap <- som(scale(wines),grid = somgrid(6, 4, "rectangular"))
plot(sommap, type="dist.neighbours", main = "SOM neighbour distances")
## use hierarchical clustering to cluster the codebook vectors
som.hc <- cutree(hclust(object.distances(sommap, "codes")), 5)
add.cluster.boundaries(sommap, som.hc)
matrix
plotHeatMap <- function(som_model, data, variable=0){
# Plot a heatmap for any variable from the data set "data".
# If variable is 0, an interactive window will be provided to choose the variable.
# If not, the variable in "variable" will be plotted.
require(dummies)
require(kohonen)
source('coolBlueHotRed.R')
interactive <- TRUE
while (interactive == TRUE){
if (variable == 0){
#show interactive window.
color_by_var <- select.list(names(data), multiple=FALSE,
graphics=TRUE,
title="Choose variable to color map by.")
# check for user finished.
if (color_by_var == ""){ # if user presses Cancel - we quit function
return(TRUE)
}
interactive <- TRUE
color_variable <- data.frame(data[, color_by_var])
} else {
color_variable <- data.frame(data[, variable])
color_by_var <- names(data)[variable]
interactive <- FALSE
}
#if the variable chosen is a string or factor -
#Get the levels and ask the user to choose which one they'd like.
if (class(color_variable[,1]) %in% c("character", "factor", "logical")){
#want to spread this out into dummy factors - but colour by one of those.
temp_data <- dummy.data.frame(color_variable, sep="_")
chosen_factor <- select.list(names(temp_data),
multiple=FALSE,
graphics=TRUE,
title="Choose level of variable for colouring")
color_variable <- temp_data[, chosen_factor]
rm(temp_data, chosen_factor)
color_by <- color_variable
} else {
#impute the missing values with the mean.
color_variable[is.na(color_variable[,1]),1] <- mean(color_variable[,1], na.rm=TRUE)
#color_by <- capVector(color_variable[,1])
#color_by <- scale(color_by)
color_by <- color_variable[,1]
}
unit_colors <- aggregate(color_by, by=list(som_model$unit.classif), FUN=mean, simplify=TRUE)
plot(som_model, type = "property", property=unit_colors[,2], main=color_by_var, palette.name=coolBlueHotRed)
}
}
plotHeatMap(somData,test)
plotHeatMap(somData,matrix)
debugSource('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code/plotHeatMap.R')
plotHeatMap(somData,matrix)
coolBlueHotRed <- function(n, alpha = 1) {
rainbow(n, end=4/6, alpha=alpha)[n:1]
}
source('coolBlueHotRed.R')
source('coolBlueHotRed.R')
cd
source('C:\\Users\\Konstantin\\Desktop\\Uni\\6Semester\\BachelorArbeit\\Code\\coolBlueHotRed.R')
plotHeatMap(somData,matrix)
debugSource('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code/plotHeatMap.R')
plotHeatMap(somData,matrix)
plotHeatMap(somData,matrix)
plotHeatMap(somData,test)
plotHeatMap(somData,test)
identify()
identify(somData)
plotHeatMap(somData,test)
num <- identify(somData)
## A function to use identify to select points, and overplot the
## points with another symbol as they are selected
identifyPch <- function(x, y = NULL, n = length(x), plot = FALSE, pch = 19, ...)
{
xy <- xy.coords(x, y); x <- xy$x; y <- xy$y
sel <- rep(FALSE, length(x))
while(sum(sel) < n) {
ans <- identify(x[!sel], y[!sel], labels = which(!sel), n = 1, plot = plot, ...)
if(!length(ans)) break
ans <- which(!sel)[ans]
points(x[ans], y[ans], pch = pch)
sel[ans] <- TRUE
}
## return indices of selected points
which(sel)
}
if(dev.interactive()) { ## use it
x <- rnorm(50); y <- rnorm(50)
plot(x,y); identifyPch(x,y) # how fast to get all?
}
dev.interactive()
shiny::runApp('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code')
dev.interactive()
windows()
## A function to use identify to select points, and overplot the
## points with another symbol as they are selected
identifyPch <- function(x, y = NULL, n = length(x), plot = FALSE, pch = 19, ...)
{
xy <- xy.coords(x, y); x <- xy$x; y <- xy$y
sel <- rep(FALSE, length(x))
while(sum(sel) < n) {
ans <- identify(x[!sel], y[!sel], labels = which(!sel), n = 1, plot = plot, ...)
if(!length(ans)) break
ans <- which(!sel)[ans]
points(x[ans], y[ans], pch = pch)
sel[ans] <- TRUE
}
## return indices of selected points
which(sel)
}
if(dev.interactive()) { ## use it
x <- rnorm(50); y <- rnorm(50)
plot(x,y); identifyPch(x,y) # how fast to get all?
}
windows()
plotHeatMap(somData,test)
identify(somData)
somData$codes
vecs <- identify(somData)
vecs
vecs <- identify(somData,plot=FALSE)
vecs
vecs <- identify(somData,plot=FALSE, n=1)
vecs
somData$codes[[V27]]
somData$codes[['V27']]
somData$codes[['27']]
somData$codes[[27]]
somData$codes[[1]]
somData$codes[[1]][[1]]
class(somData$codes)
somData$codes
class(somData$codes[[1]])
somData$codes[[1]][1,]
somData$codes[[1]][48,]
somData$codes[[1]][27,]
somData$grid
somData$data
somData$unit.classif
somData$unit.classif==27
somData$unit.classif==12
test
seq_len(1756)[somData$unit.classif==12]
runApp('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code')
runApp('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code')
runApp('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code')
runApp('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code')
runApp('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code')
dev.interactive()
shiny::runApp('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code')
runApp('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code')
