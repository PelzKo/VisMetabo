}
getIdsDoc(doc)
doc <- runDoc(fullData)
doc <- runDoc(fullData)
doc <- runDoc(fullData)
getIdsDoc(doc)
shiny::runApp('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code')
install.packages("shinyBS")
runApp('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code')
install.packages("maps")
runApp('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code')
clusteringData$DOC
getIdsDoc(clusteringData$DOC)
#install.packages("https://cran.r-project.org/src/contrib/Archive/rJava/rJava_0.9-12.tar.gz", repos=NULL, method="libcurl")
#arr <- c(c(1,1,1,1),c(1,1,1,1),c(9,9,9,9),c(1,1,1,1),c(1,1,1,1),c(9,9,9,9))
arr <- c(1,1,1,1,9,9,1,1,1,1,9,9,1,1,1,1,9,9,1,2,3,4,5,6)
dataM <- matrix(arr,6,4)
dataM <- data.frame(dataM)
debugSource('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code/doc.R')
docM <- runDoc(dataM)
getIdsDoc(docM)
unlist(lapply(ids,function(x){x-min(unlist(ids))+1}))
lapply(ids,function(x){x-min(unlist(ids))+1})
getIdsDoc(doc)
ids
lapply(ids,function(x){x-min(unlist(ids))+1})
ids
list(ids)
split(ids, rep(1:ncol(ids), each = nrow(ids)))
split(ids, rep(1:nrow(ids), each = ncol(ids)))
getIdsDoc <- function(cluster){
clusterApplier <- .jnew("ClusterApplier")
ids <- .jcall(clusterApplier, "[[D", "getIds",cluster, simplify = T)
idsClean <- split(ids, rep(1:nrow(ids), each = ncol(ids)))
.jcheck()
lapply(idsClean,function(x){x-min(unlist(idsClean))+1})
}
getIdsDoc(docM)
getIdsDoc <- function(cluster){
clusterApplier <- .jnew("ClusterApplier")
ids <- .jcall(clusterApplier, "[[D", "getIds",cluster, simplify = T)
if (class(ids)!='list'){
ids <- split(ids, rep(1:nrow(ids), each = ncol(ids)))
}
.jcheck()
lapply(ids,function(x){x-min(unlist(ids))+1})
}
getIdsDoc(docM)
getIdsDoc(doc)
debugSource('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code/doc.R')
getIdsDoc(doc)
class(ids)
getIdsDoc <- function(cluster){
clusterApplier <- .jnew("ClusterApplier")
ids <- .jcall(clusterApplier, "[[D", "getIds",cluster, simplify = T)
if (class(ids)[[1]]!='list'){
ids <- split(ids, rep(1:nrow(ids), each = ncol(ids)))
}
.jcheck()
lapply(ids,function(x){x-min(unlist(ids))+1})
}
getIdsDoc(doc)
source('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code/doc.R')
runApp('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code')
runApp()
runApp()
runApp('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code')
(seq_len(length(inputData[[tempId]]))+1)
length(seq_len(length(inputData[[tempId]]))+1))
length(seq_len(length(inputData[[tempId]]))+1)
length(inputData[[tempId]])
runApp('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code')
finalValues$idFromNum[[2]]
finalValues$idFromNum
names(finalValues$idFromNum)
inputData[[tempId]]
finalValues$idFromNum
finalValues$idFromNum[[2]]
finalValues$idFromNum[["2"]]
as.character(c(2,5,7))
shiny::runApp('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code')
testdata <- function(){
#data <- readFile("C:\\Users\\Konstantin\\Desktop\\Uni\\6Semester\\BachelorArbeit\\BeispielDaten\\metabExampleMaleFemale.xlsx")
data <- readFile("C:\\Users\\Konstantin\\Desktop\\Uni\\6.Semester\\BachelorArbeit\\data\\QMDiab_aminoGlucose.xlsx")
inputData <- data$values[complete.cases(data$values), ]
tempId <- 1
tempStart <- 4
tempEnd <- 18
id <- inputData[[tempId]]
metab <- inputData[c(tempStart:tempEnd)]
pheno <- inputData[-c(tempId,c(tempStart:tempEnd))]
pheno$None <- numeric(length(id[[1]]))
metabComplete <- data.frame(scale(metab))
metabComplete
}
test <- testdata()
testdata <- function(){
data <- readFile("C:\\Users\\Konstantin\\Desktop\\Uni\\6Semester\\BachelorArbeit\\BeispielDaten\\metabExampleMaleFemale.xlsx")
#data <- readFile("C:\\Users\\Konstantin\\Desktop\\Uni\\6.Semester\\BachelorArbeit\\data\\QMDiab_aminoGlucose.xlsx")
inputData <- data$values[complete.cases(data$values), ]
tempId <- 1
tempStart <- 4
tempEnd <- 18
id <- inputData[[tempId]]
metab <- inputData[c(tempStart:tempEnd)]
pheno <- inputData[-c(tempId,c(tempStart:tempEnd))]
pheno$None <- numeric(length(id[[1]]))
metabComplete <- data.frame(scale(metab))
metabComplete
}
test <- testdata()
clust <- cosa2(test)
clust
clust <- cosa2(test, niter = 1, noit = 1)
windows()
hclst.cosa <- hierclust(clust$D)
grps.cosa <- getclust(hclst.cosa)
grps.cosa
runApp('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code')
testdata <- function(){
data <- readFile("C:\\Users\\Konstantin\\Desktop\\Uni\\6Semester\\BachelorArbeit\\BeispielDaten\\metabExampleMaleFemaleSMALLSET50.xlsx")
#data <- readFile("C:\\Users\\Konstantin\\Desktop\\Uni\\6.Semester\\BachelorArbeit\\data\\QMDiab_aminoGlucose.xlsx")
inputData <- data$values[complete.cases(data$values), ]
tempId <- 1
tempStart <- 4
tempEnd <- 18
id <- inputData[[tempId]]
metab <- inputData[c(tempStart:tempEnd)]
pheno <- inputData[-c(tempId,c(tempStart:tempEnd))]
pheno$None <- numeric(length(id[[1]]))
metabComplete <- data.frame(scale(metab))
metabComplete
}
test <- testdata()
library("openxlsx")
test <- testdata()
cosa <- cosa2(test, niter = 1, noit = 1)
library(shiny)
library(shinyBS)
library(subspace)
library(ggplot2)
library(ggfortify)
library(rCOSA)
library(kohonen)
library(rJava)
#library(ggmap)
#library(ggdendro)
library(dendextend)
cosa <- cosa2(test, niter = 1, noit = 1)
display <- hierclust(cosa$D)
ggplot(display)
ggplot(display$dendro)
ggplot(as.ggdend(display))
ggplot(as.ggdend(display$dendro))
runApp('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code')
temps$rects
nrow(temps$rects)>0
geom_rect(data = temps$rects, mapping=aes(xmin=x1, xmax=x2, ymin=y1, ymax=y2), color="blue"))
geom_rect(data = temps$rects, mapping=aes(xmin=x1, xmax=x2, ymin=y1, ymax=y2), color="blue")
runApp('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code')
runApp('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code')
ggplot(display$dendro)
temps$rects
runApp('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code')
temps$rects
rects <- data.frame(x1=17.66,y1=-0.04,x2=20.33,y2=0.5743935,border="blue")
rects
rects <- data.frame(x1=17.66,y1=-0.04,x2=20.33,y2=0.5743935,border="blue")
ggplot(display$dendro)
ggplot(display$dendro) + geom_rect(data = rects, mapping=aes(xmin=x1, xmax=x2, ymin=y1, ymax=y2), color="blue")
pl <- ggplot(display$dendro) + geom_rect(data = rects, mapping=aes(xmin=x1, xmax=x2, ymin=y1, ymax=y2), color="blue")
pl
runApp('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code')
temps$grps
test <- temps$grps
union(retval)
unique(retval)
temps$grps
length(temps$grps)
runApp('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code')
runApp('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code')
runApp('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code')
runApp('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code')
View(grps.cosa)
grps.cosa[2]
grps.cosa[[2]][2]
grps.cosa[[2]][[2]]
runApp('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code')
runApp('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code')
runApp('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code')
pcaValues$percentage
runApp('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code')
shiny::runApp('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code')
sessionInfo()
ip
runApp('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code')
library(kohonen)
shiny::runApp('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code')
install.packages(ggdendro)
install.packages("ggdendro")
runApp('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code')
runApp('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code')
runApp('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code')
runApp('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code')
clusteringData$Clique
unlist(clusteringData$Clique))
unlist(clusteringData$Clique)
max(unlist(clusteringData$Clique))
test <- 16
test
test
test[c(2,5,3)] <- 17
test
runApp('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code')
nrow(metabComplete)
runApp('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code')
shiny::runApp('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code')
runApp('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code')
runApp('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code')
source("old/testdata.R")
source("old/testdata.R")
source("old/testdata.R")
source(./../ReadingData.R)
source("old/testdata.R")
source("testdata.R")
source("testdata.R")
source(ReadingData.R)
getwd()
source(C:\\Users\\Konstantin\\Desktop\\Uni\\6Semester\\BachelorArbeit\\code\\ReadingData.R)
source("C:\\Users\\Konstantin\\Desktop\\Uni\\6Semester\\BachelorArbeit\\code\\ReadingData.R")
source("C:\\Users\\Konstantin\\Desktop\\Uni\\6Semester\\BachelorArbeit\\code\\testdata.R")
source("C:\\Users\\Konstantin\\Desktop\\Uni\\6Semester\\BachelorArbeit\\code\\testdata.R")
small <- getData()
big <- getData(FALSE)
small <- getData()
source("C:\\Users\\Konstantin\\Desktop\\Uni\\6Semester\\BachelorArbeit\\code\\testdata.R")
small <- getData()
clusteringData$Clique <- CLIQUE(small, xi = 5,tau = 0.1)
cliqueClust <- CLIQUE(small, xi = 500,tau = 0.1)
cliqueClust <- CLIQUE(small, xi = 50,tau = 0.1)
cliqueClust <- CLIQUE(small, xi = 50,tau = 0.1)
cliqueClust <- cliqueClust[order(unlist(lapply(lapply(cliqueClust, "[[", "subspace"),"sum")),decreasing = TRUE)]
cliqueClust
cliqueClust <- CLIQUE(small, xi = 30,tau = 0.1)
cliqueClust
unlist(lapply(lapply(cliqueClust, "[[", "subspace"),"sum"))
nums <- unlist(lapply(lapply(cliqueClust, "[[", "subspace"),"sum"))
nums[1:5]
nums[1:3]
range(6)
range(1,6)
1:5
small <- getData()
smallMetab <- small[[1]]
smallPheno <- small[[2]]
small
small[[1]]
small[[2]]
debugSource('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code/testdata.R')
small <- getData()
list(metabComplete,pheno)
list(metabComplete,pheno)
debugSource('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code/testdata.R')
small <- getData()
smallMetab <- small[[1]]
smallPheno <- small[[2]]
T2D <- smallPheno["T2D"]
source("C:\\Users\\Konstantin\\Desktop\\Uni\\6Semester\\BachelorArbeit\\code\\testdata.R")
small <- getData()
smallMetab <- small[[1]]
smallPheno <- small[[2]]
T2D <- smallPheno["T2D"]
cliqueClust <- CLIQUE(smallMetab, xi = 30,tau = 0.1)
cliqueClust <- cliqueClust[order(unlist(lapply(lapply(cliqueClust, "[[", "subspace"),"sum")),decreasing = TRUE)]
nums <- unlist(lapply(lapply(cliqueClust, "[[", "subspace"),"sum"))
top5 <- nums[1:5]
top5Diab <- rep(0.5,5)
for (i in 1:5){
currentCluster <- cliqueClust[as.numeric(i)][[1]]
top5Diab[i] <- mean(T2D[currentCluster])
}
for (i in 1:5){
currentCluster <- cliqueClust[as.numeric(i)][[1]]
top5Diab[i] <- mean(T2D[[1]][currentCluster])
}
T2D[[1]]
i<-1
currentCluster <- cliqueClust[as.numeric(i)][[1]]
i<-1
currentCluster <- cliqueClust[as.numeric(i)][[1]]$subspace
top5Diab[i] <- mean(T2D[[1]][currentCluster])
for (i in 1:5){
currentCluster <- cliqueClust[as.numeric(i)][[1]]$subspace
top5Diab[i] <- mean(T2D[[1]][currentCluster])
}
for (i in 1:5){
currentCluster <- cliqueClust[as.numeric(i)][[1]]$objects
top5Diab[i] <- mean(T2D[[1]][currentCluster])
}
for (i in 1:5){
currentCluster <- cliqueClust[as.numeric(i)][[1]]
top5Diab[i] <- names(smallMetab)[currentCluster$subspace]
top5Diab[i] <- mean(T2D[[1]][currentCluster$objects])
}
top5Metabs <- list()
top5Diab <- rep(0.5,5)
for (i in 1:5){
currentCluster <- cliqueClust[as.numeric(i)][[1]]
top5Diab[i] <- names(smallMetab)[currentCluster$subspace]
top5Diab[i] <- mean(T2D[[1]][currentCluster$objects])
}
top5 <- nums[1:5]
top5Metabs <- list()
top5Diab <- rep(0.5,5)
for (i in 1:5){
currentCluster <- cliqueClust[as.numeric(i)][[1]]
top5Metabs[i] <- names(smallMetab)[currentCluster$subspace]
top5Diab[i] <- mean(T2D[[1]][currentCluster$objects])
}
top5Metabs[2]
for (i in 1:5){
currentCluster <- cliqueClust[as.numeric(i)][[1]]
top5Metabs[[i]] <- names(smallMetab)[currentCluster$subspace]
top5Diab[i] <- mean(T2D[[1]][currentCluster$objects])
}
currentCluster <- cliqueClust[as.numeric(1)][[1]]
top5Metabs[[i]] <- names(smallMetab)[currentCluster$subspace]
names(smallMetab)[currentCluster$subspace]
currentCluster$subspace
for (i in 1:5){
currentCluster <- cliqueClust[as.numeric(i)][[1]]
top5Metabs[[i]] <- names(smallMetab)[currentCluster$subspace]
top5Diab[i] <- mean(T2D[[1]][currentCluster$objects])
}
cliqueClust <- CLIQUE(smallMetab, xi = 5,tau = 0.1)
cliqueClust <- cliqueClust[order(unlist(lapply(lapply(cliqueClust, "[[", "subspace"),"sum")),decreasing = TRUE)]
nums <- unlist(lapply(lapply(cliqueClust, "[[", "subspace"),"sum"))
top5 <- nums[1:5]
top5Metabs <- list()
top5Diab <- rep(0.5,5)
for (i in 1:5){
currentCluster <- cliqueClust[as.numeric(i)][[1]]
top5Metabs[[i]] <- names(smallMetab)[currentCluster$subspace]
top5Diab[i] <- mean(T2D[[1]][currentCluster$objects])
}
realDiabs <- abs(0.5-top5Diab)
library(subspace)
source("C:\\Users\\Konstantin\\Desktop\\Uni\\6Semester\\BachelorArbeit\\code\\testdata.R")
small <- getData()
smallMetab <- small[[1]]
smallPheno <- small[[2]]
T2D <- smallPheno["T2D"]
#big <- getData(FALSE)
#bigMetab <- big[[1]]
#bigPheno <- big[[2]]
cliqueClust <- CLIQUE(smallMetab, xi = 50,tau = 0.1)
cliqueClust <- cliqueClust[order(unlist(lapply(lapply(cliqueClust, "[[", "subspace"),"sum")),decreasing = TRUE)]
nums <- unlist(lapply(lapply(cliqueClust, "[[", "subspace"),"sum"))
top5 <- nums[1:5]
top5Metabs <- list()
top5Diab <- rep(0.5,5)
for (i in 1:5){
currentCluster <- cliqueClust[as.numeric(i)][[1]]
top5Metabs[[i]] <- names(smallMetab)[currentCluster$subspace]
top5Diab[i] <- mean(T2D[[1]][currentCluster$objects])
}
realDiabs <- abs(0.5-top5Diab)
library(subspace)
source("C:\\Users\\Konstantin\\Desktop\\Uni\\6Semester\\BachelorArbeit\\code\\testdata.R")
small <- getData()
smallMetab <- small[[1]]
smallPheno <- small[[2]]
T2D <- smallPheno["T2D"]
#big <- getData(FALSE)
#bigMetab <- big[[1]]
#bigPheno <- big[[2]]
cliqueClust <- CLIQUE(smallMetab, xi = 40,tau = 0.1)
cliqueClust <- cliqueClust[order(unlist(lapply(lapply(cliqueClust, "[[", "subspace"),"sum")),decreasing = TRUE)]
nums <- unlist(lapply(lapply(cliqueClust, "[[", "subspace"),"sum"))
top5 <- nums[1:5]
top5Metabs <- list()
top5Diab <- rep(0.5,5)
for (i in 1:5){
currentCluster <- cliqueClust[as.numeric(i)][[1]]
top5Metabs[[i]] <- names(smallMetab)[currentCluster$subspace]
top5Diab[i] <- mean(T2D[[1]][currentCluster$objects])
}
realDiabs <- abs(0.5-top5Diab)
library(subspace)
source("C:\\Users\\Konstantin\\Desktop\\Uni\\6Semester\\BachelorArbeit\\code\\testdata.R")
N <- 1000  # total number of rows to preallocate--possibly an overestimate
result <- data.frame(name=rep("", N), dimNames=rep("", N),  # as many cols as you need
diab1=rep(NA, N),diab2=rep(NA, N),diab3=rep(NA, N),diab4=rep(NA, N),
diab5=rep(NA, N))
small <- getData()
smallMetab <- small[[1]]
smallPheno <- small[[2]]
T2D <- smallPheno["T2D"]
method <- "clique"
xi <- 40
tau <- 0.1
cliqueClust <- CLIQUE(smallMetab, xi = xi,tau = tau)
cliqueClust <- cliqueClust[order(unlist(lapply(lapply(cliqueClust, "[[", "subspace"),"sum")),decreasing = TRUE)]
nums <- unlist(lapply(lapply(cliqueClust, "[[", "subspace"),"sum"))
top5 <- nums[1:5]
top5Metabs <- list()
top5Diab <- rep(0.5,5)
for (i in 1:5){
currentCluster <- cliqueClust[as.numeric(i)][[1]]
top5Metabs[[i]] <- names(smallMetab)[currentCluster$subspace]
top5Diab[i] <- mean(T2D[[1]][currentCluster$objects])
}
realDiabs <- abs(0.5-top5Diab)
j<-1
result[j, ] <- list(paste0(method,xi,name),paste(top5Metabs,sep = "_"),top5Diab[[1]],top5Diab[[2]],top5Diab[[3]],top5Diab[[4]],top5Diab[[5]])
result[j, ] <- list(paste0(method,xi,tau),paste(top5Metabs,sep = "_"),top5Diab[[1]],top5Diab[[2]],top5Diab[[3]],top5Diab[[4]],top5Diab[[5]])
result[j, ] <- list(paste(method,xi,tau,sep = "_"),paste(top5Metabs,sep = "_"),top5Diab[[1]],top5Diab[[2]],top5Diab[[3]],top5Diab[[4]],top5Diab[[5]])
paste(top5Metabs,sep = "_")
top5Metabs
paste0(top5Metabs)
paste(paste0(top5Metabs),sep = "_")
lapply(top5Metabs, "[["),"paste0")
lapply(top5Metabs, "["),"paste0")
lapply(lapply(top5Metabs, "["),"paste0")
lapply(lapply(top5Metabs, "[["),"paste0")
lapply(lapply(top5Metabs, "[[",1),"paste0")
lapply(lapply(top5Metabs, "[",1),"paste0")
paste(unlist(top5Metabs),sep = "_")
unlist(top5Metabs)
unlist(top5Metabs)[2]
unlist(top5Metabs)
paste0(unlist(top5Metabs))
do.call("paste", c(top5Metabs, sep = "_"))
result[j, ] <- list(paste(method,xi,tau,sep = "_"),do.call("paste", c(top5Metabs, sep = "_")) ,top5Diab[[1]],top5Diab[[2]],top5Diab[[3]],top5Diab[[4]],top5Diab[[5]])
write.table(result, file='output.tsv', sep='\t')
write.table(result, file='output.tsv', quote = FALSE, sep='\t')
write.table(result, file='output.tsv', quote = FALSE, row.names = FALSE, sep='\t')
complete.cases(result)
result <- result[complete.cases(result)]
result
y(subspace)
source("C:\\Users\\Konstantin\\Desktop\\Uni\\6Semester\\BachelorArbeit\\code\\testdata.R")
N <- 1000  # total number of rows to preallocate--possibly an overestimate
result <- data.frame(name=rep("", N), dimNames=rep("", N),  # as many cols as you need
diab1=rep(NA, N),diab2=rep(NA, N),diab3=rep(NA, N),diab4=rep(NA, N),
diab5=rep(NA, N))
small <- getData()
smallMetab <- small[[1]]
smallPheno <- small[[2]]
T2D <- smallPheno["T2D"]
#big <- getData(FALSE)
#bigMetab <- big[[1]]
#bigPheno <- big[[2]]
method <- "clique"
xi <- 40
tau <- 0.1
cliqueClust <- CLIQUE(smallMetab, xi = xi,tau = tau)
cliqueClust <- cliqueClust[order(unlist(lapply(lapply(cliqueClust, "[[", "subspace"),"sum")),decreasing = TRUE)]
nums <- unlist(lapply(lapply(cliqueClust, "[[", "subspace"),"sum"))
top5 <- nums[1:5]
top5Metabs <- list()
top5Diab <- rep(0.5,5)
for (i in 1:5){
currentCluster <- cliqueClust[as.numeric(i)][[1]]
top5Metabs[[i]] <- names(smallMetab)[currentCluster$subspace]
top5Diab[i] <- mean(T2D[[1]][currentCluster$objects])
}
realDiabs <- abs(0.5-top5Diab)
j<-1
result[j, ] <- list(past
result <- result[complete.cases(result),]
j<-1
result[j, ] <- list(paste(method,xi,tau,sep = "_"),do.call("paste", c(top5Metabs, sep = "_")) ,top5Diab[[1]],top5Diab[[2]],top5Diab[[3]],top5Diab[[4]],top5Diab[[5]])
result <- result[complete.cases(result),]
write.table(result, file='output.tsv', quote = FALSE, row.names = FALSE, sep='\t')
expand.grid(c(40,60,100), c(0.1,0.2,0.4))
.rs.restartR()
debugSource('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code/doc.R')
test <- testDataFrame()
docClust <- runDoc(test, alpha, beta, w)
alpha <- 0.1#combinations[row,][[1]]
beta <- 0.25#combinations[row,][[2]]
test <- testDataFrame()
library(subspace)
library(kohonen)
source("C:\\Users\\Konstantin\\Desktop\\Uni\\6Semester\\BachelorArbeit\\code\\testdata.R")
source("C:\\Users\\Konstantin\\Desktop\\Uni\\6Semester\\BachelorArbeit\\code\\doc.R")
test <- testDataFrame()
docClust <- runDoc(test, alpha, beta, w)
.rs.restartR()
docClust <- runDoc(test, alpha, beta, w)
library(subspace)
library(kohonen)
source("C:\\Users\\Konstantin\\Desktop\\Uni\\6Semester\\BachelorArbeit\\code\\testdata.R")
source("C:\\Users\\Konstantin\\Desktop\\Uni\\6Semester\\BachelorArbeit\\code\\doc.R")
library(rJava)
-
alpha <- 0.1#combinations[row,][[1]]
alpha <- 0.1#combinations[row,][[1]]
beta <- 0.25#combinations[row,][[2]]
w <- 15
test <- testDataFrame()
docClust <- runDoc(test, alpha, beta, w)
clusterApplier <- .jnew("ClusterApplier")
initDoc()
clusterApplier <- .jnew("ClusterApplier")
setwd("C:\\Users\\Konstantin\\Desktop\\Uni\\6Semester\\BachelorArbeit\\code")
test <- testDataFrame()
docClust <- runDoc(test, alpha, beta, w)
.rs.restartR()
docClust <- runDoc(test, alpha, beta, w)
idsInClustersDoc <- getIdsDoc(docClust)
