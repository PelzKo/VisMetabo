run <- tryCatch({
cliqueClust <- CLIQUE(data, xi = xi,tau = tau)
cliqueClust <- cliqueClust[order(unlist(lapply(lapply(cliqueClust, "[[", "subspace"),"sum")),decreasing = TRUE)]
dims <- unlist(lapply(lapply(cliqueClust, "[[", "subspace"),"sum"))[1:5]
dims[is.na(dims)]<-0
numInd <- unlist(lapply(lapply(cliqueClust, "[[", "objects"),"length"))[1:5]
numInd[is.na(numInd)]<-0
dimsAndIndividuals <- paste0(c(dims,numInd),collapse="_")
top5Metabs <- list()
top5Diab <- rep(0.5,5)
for (i in 1:5){
currentCluster <- cliqueClust[as.numeric(i)][[1]]
top5Metabs[[i]] <- paste0(names(data)[currentCluster$subspace], collapse = "_")
if (counterSmallBig=="small"){
top5Diab[i] <- mean(T2D[[1]][currentCluster$objects])
} else {
top5Diab[i] <- mean(gender[currentCluster$objects])
}
}
top5Diab[is.na(top5Diab)]<-0.5
#realDiabs <- abs(0.5-top5Diab)
result[counter, ] <- list(paste(method,counterSmallBig,xi,tau,sep = "_"),paste0(top5Metabs,collapse = ";") ,top5Diab[[1]],top5Diab[[2]],top5Diab[[3]],top5Diab[[4]],top5Diab[[5]],dimsAndIndividuals,mean(abs(0.5-top5Diab)))
counter <- counter + 1
return(NA)
},
error = function(cond){
log <- c(paste(method,counterSmallBig,xi,tau,sep = "_"),cond$message,toString(cond$call))
return(log)
})
if (run[[2]]!="no function to return from, jumping to top level"){
logs <- c(logs,run)
}
print(paste(counter-1,method,counterSmallBig,xi,tau,sep = "_"))
}
}
}
)
}
}
if (length(logs)==0){
logs<-c("No","Errors","found")
}
result <- result[complete.cases(result[[1]]),]
logsToWrite <- data.frame(matrix(unlist(logs), nrow=length(unlist(logs))/3, byrow=T))
write.table(result, file='output.tsv', quote = FALSE, row.names = FALSE, sep='\t')
write.table(logsToWrite, file='logs.tsv', quote = FALSE, row.names = FALSE, col.names = FALSE, sep='\t')
setwd("C:\\Users\\Konstantin\\Desktop\\Uni\\6Semester\\BachelorArbeit\\code")
initDoc()
runDoc <- function(data, alpha=0.2, beta=0.8, w=0.05){
initDoc()
clusterApplier <- .jnew("ClusterApplier")
#arrayDouble <- .jcall(clusterApplier, "[[D", "matrix_from_array",as.vector(as.matrix(data)),ncol(data),evalArray=F)
result <- .jcall(clusterApplier, "[Lde/lmu/ifi/dbs/elki/data/Cluster;", "doc",.jarray(as.matrix(data), dispatch = TRUE),alpha,beta,w,evalArray = F)
result
}
getIdsDoc <- function(cluster){
clusterApplier <- .jnew("ClusterApplier")
#ids <- .jcall(clusterApplier, "[[D", "getIds",cluster, simplify = TRUE)
ids <- .jcall(clusterApplier, "[D", "getIdsOneDim",cluster, simplify = TRUE)
#if (class(ids)[[1]]!='list'){
#  ids <- split(ids, rep(1:nrow(ids), each = ncol(ids)))
#}
.jcheck()
lapply(ids,function(x){x-min(unlist(ids))})
}
getDimsDoc <- function(cluster){
clusterApplier <- .jnew("ClusterApplier")
dims <- .jcall(clusterApplier, "[[D", "getDims",cluster, simplify = T)
.jcheck()
dims
}
getAvgsDoc <- function(cluster){
clusterApplier <- .jnew("ClusterApplier")
avgs <- .jcall(clusterApplier, "[[D", "getAverages",cluster, simplify = T)
.jcheck()
avgs
}
initDoc <- function(){
.jinit(".")
.jaddClassPath("dependencies/elki-clustering-0.7.5.jar")
.jaddClassPath("dependencies/elki-core-0.7.5.jar")
.jaddClassPath("dependencies/elki-core-api-0.7.5.jar")
.jaddClassPath("dependencies/elki-core-data-0.7.5.jar")
.jaddClassPath("dependencies/elki-core-dbids-0.7.5.jar")
.jaddClassPath("dependencies/elki-core-dbids-int-0.7.5.jar")
.jaddClassPath("dependencies/elki-core-distance-0.7.5.jar")
.jaddClassPath("dependencies/elki-core-math-0.7.5.jar")
.jaddClassPath("dependencies/elki-core-util-0.7.5.jar")
.jaddClassPath("dependencies/elki-database-0.7.5.jar")
.jaddClassPath("dependencies/elki-input-0.7.5.jar")
.jaddClassPath("dependencies/elki-logging-0.7.5.jar")
.jaddClassPath("dependencies/fastutil-8.2.2.jar")
.jaddClassPath("dependencies/jafama-2.3.1.jar")
.jaddClassPath("dependencies/Clust.jar")
#.jaddClassPath("C:\\Users\\Konstantin\\Programmierung\\javaBA\\out\\production\\javaBA\\Clust.jar")
#.jaddClassPath("C:\\Users\\Konstantin\\Downloads\\elki-0.7.5\\elki\\elki-clustering-0.7.5.jar")
#.jaddClassPath("C:\\Users\\Konstantin\\Downloads\\elki-0.7.5\\elki\\elki-core-0.7.5.jar")
#.jaddClassPath("C:\\Users\\Konstantin\\Downloads\\elki-0.7.5\\elki\\elki-core-api-0.7.5.jar")
#.jaddClassPath("C:\\Users\\Konstantin\\Downloads\\elki-0.7.5\\elki\\elki-core-data-0.7.5.jar")
#.jaddClassPath("C:\\Users\\Konstantin\\Downloads\\elki-0.7.5\\elki\\elki-core-dbids-0.7.5.jar")
#.jaddClassPath("C:\\Users\\Konstantin\\Downloads\\elki-0.7.5\\elki\\elki-core-dbids-int-0.7.5.jar")
#.jaddClassPath("C:\\Users\\Konstantin\\Downloads\\elki-0.7.5\\elki\\elki-core-distance-0.7.5.jar")
#.jaddClassPath("C:\\Users\\Konstantin\\Downloads\\elki-0.7.5\\elki\\elki-core-math-0.7.5.jar")
#.jaddClassPath("C:\\Users\\Konstantin\\Downloads\\elki-0.7.5\\elki\\elki-core-util-0.7.5.jar")
#.jaddClassPath("C:\\Users\\Konstantin\\Downloads\\elki-0.7.5\\elki\\elki-database-0.7.5.jar")
#.jaddClassPath("C:\\Users\\Konstantin\\Downloads\\elki-0.7.5\\elki\\elki-input-0.7.5.jar")
#.jaddClassPath("C:\\Users\\Konstantin\\Downloads\\elki-0.7.5\\elki\\elki-logging-0.7.5.jar")
#.jaddClassPath("C:\\Users\\Konstantin\\Downloads\\elki-0.7.5\\dependency\\fastutil-8.2.2.jar")
#.jaddClassPath("C:\\Users\\Konstantin\\Downloads\\elki-0.7.5\\dependency\\jafama-2.3.1.jar")
}
initDoc()
library(rJava)
initDoc()
clusterApplier <- .jnew("ClusterApplier")
arrayDouble <- .jcall(clusterApplier, "[[D", "matrix_from_array",as.vector(as.matrix(data)),ncol(data),evalArray=F)
result <- .jcall(clusterApplier, "[Lde/lmu/ifi/dbs/elki/data/Cluster;", "doc",.jarray(as.matrix(data), dispatch = TRUE),alpha,beta,w,evalArray = F)
alpha <- 0.2
beta <- 0.8
w <- 0.05
result <- .jcall(clusterApplier, "[Lde/lmu/ifi/dbs/elki/data/Cluster;", "doc",.jarray(as.matrix(data), dispatch = TRUE),alpha,beta,w,evalArray = F)
getIdsDoc(result)
data
res <- getIdsDoc(result)
split(res,0)
listIds <- lapply(ids,function(x){x-min(unlist(ids))})
getIdsDoc <- function(cluster){
clusterApplier <- .jnew("ClusterApplier")
#ids <- .jcall(clusterApplier, "[[D", "getIds",cluster, simplify = TRUE)
ids <- .jcall(clusterApplier, "[D", "getIdsOneDim",cluster, simplify = TRUE)
#if (class(ids)[[1]]!='list'){
#  ids <- split(ids, rep(1:nrow(ids), each = ncol(ids)))
#}
.jcheck()
listIds <- lapply(ids,function(x){x-min(unlist(ids))})
result <- list()
counter <- 1
for (elem in listIds){
if (elem == 0){
counter <- counter + 1
} else {
result[counter] <- c(result[counter],elem)
}
}
result
}
getIdsDoc(result)
cluster <- result
clusterApplier <- .jnew("ClusterApplier")
#ids <- .jcall(clusterApplier, "[[D", "getIds",cluster, simplify = TRUE)
ids <- .jcall(clusterApplier, "[D", "getIdsOneDim",cluster, simplify = TRUE)
#if (class(ids)[[1]]!='list'){
#  ids <- split(ids, rep(1:nrow(ids), each = ncol(ids)))
#}
.jcheck()
listIds <- lapply(ids,function(x){x-min(unlist(ids))})
result <- list()
counter <- 1
for (elem in listIds){
if (elem == 0){
counter <- counter + 1
} else {
result[counter] <- c(result[counter],elem)
}
}
elem <- listIds[1]
elem
elem in listIds
listIds
unlist(listIds)
for (elem in unlist(listIds)){
if (elem == 0){
counter <- counter + 1
} else {
result[counter] <- c(result[counter],elem)
}
}
elem <- unlist(listIds)[1]
elem
result
result <- list()
result
result[counter] <- c(result[counter],elem)
for (elem in unlist(listIds)){
if (elem == 0){
result[counter] <- temp
counter <- counter + 1
temp <- numeric()
} else {
temp <- c(temp,elem)
}
}
temp <- numeric()
for (elem in unlist(listIds)){
if (elem == 0){
result[counter] <- temp
counter <- counter + 1
temp <- numeric()
} else {
temp <- c(temp,elem)
}
}
result <- list()
counter <- 1
temp <- numeric()
result
result[1] <- 3
result[2] <- c(3,2,6,34)
result[[2]] <- c(3,2,6,34)
#if (class(ids)[[1]]!='list'){
#  ids <- split(ids, rep(1:nrow(ids), each = ncol(ids)))
#}
.jcheck()
listIds <- lapply(ids,function(x){x-min(unlist(ids))})
result <- list()
counter <- 1
temp <- numeric()
for (elem in unlist(listIds)){
if (elem == 0){
result[[counter]] <- temp
counter <- counter + 1
temp <- numeric()
} else {
temp <- c(temp,elem)
}
}
result
getIdsDoc <- function(cluster){
clusterApplier <- .jnew("ClusterApplier")
#ids <- .jcall(clusterApplier, "[[D", "getIds",cluster, simplify = TRUE)
ids <- .jcall(clusterApplier, "[D", "getIdsOneDim",cluster, simplify = TRUE)
#if (class(ids)[[1]]!='list'){
#  ids <- split(ids, rep(1:nrow(ids), each = ncol(ids)))
#}
.jcheck()
listIds <- lapply(ids,function(x){x-min(unlist(ids))})
result <- list()
counter <- 1
temp <- numeric()
for (elem in unlist(listIds)){
if (elem == 0){
result[[counter]] <- temp
counter <- counter + 1
temp <- numeric()
} else {
temp <- c(temp,elem)
}
}
result[[counter]] <- temp
result
}
initDoc()
clusterApplier <- .jnew("ClusterApplier")
arrayDouble <- .jcall(clusterApplier, "[[D", "matrix_from_array",as.vector(as.matrix(data)),ncol(data),evalArray=F)
result <- .jcall(clusterApplier, "[Lde/lmu/ifi/dbs/elki/data/Cluster;", "doc",.jarray(as.matrix(data), dispatch = TRUE),alpha,beta,w,evalArray = F)
getIdsDoc(result)
debugSource('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code/doc.R')
getIdsDoc <- function(cluster){
clusterApplier <- .jnew("ClusterApplier")
#ids <- .jcall(clusterApplier, "[[D", "getIds",cluster, simplify = TRUE)
ids <- .jcall(clusterApplier, "[D", "getIdsOneDim",cluster, simplify = TRUE)
#if (class(ids)[[1]]!='list'){
#  ids <- split(ids, rep(1:nrow(ids), each = ncol(ids)))
#}
.jcheck()
listIds <- lapply(ids,function(x){x-min(unlist(ids))})
result <- list()
counter <- 1
temp <- numeric()
for (elem in unlist(listIds)){
if (elem == 0){
result[[counter]] <- temp
counter <- counter + 1
temp <- numeric()
} else {
temp <- c(temp,elem)
}
}
result[[counter]] <- temp
result
}
getIdsDoc(result)
getIdsDoc(result)
cluster <- result
clusterApplier <- .jnew("ClusterApplier")
#ids <- .jcall(clusterApplier, "[[D", "getIds",cluster, simplify = TRUE)
ids <- .jcall(clusterApplier, "[D", "getIdsOneDim",cluster, simplify = TRUE)
ids
replace(ids,0,NA)
ids[ids!=0]
getIdsDoc <- function(cluster){
clusterApplier <- .jnew("ClusterApplier")
#ids <- .jcall(clusterApplier, "[[D", "getIds",cluster, simplify = TRUE)
ids <- .jcall(clusterApplier, "[D", "getIdsOneDim",cluster, simplify = TRUE)
#if (class(ids)[[1]]!='list'){
#  ids <- split(ids, rep(1:nrow(ids), each = ncol(ids)))
#}
.jcheck()
listIds <- lapply(ids,function(x){x-min(unlist(ids[ids!=0]))})
result <- list()
counter <- 1
temp <- numeric()
for (elem in unlist(listIds)){
if (elem == 0){
result[[counter]] <- temp
counter <- counter + 1
temp <- numeric()
} else {
temp <- c(temp,elem)
}
}
result[[counter]] <- temp
result
}
getIdsDoc(cluster)
getIdsDoc <- function(cluster){
clusterApplier <- .jnew("ClusterApplier")
#ids <- .jcall(clusterApplier, "[[D", "getIds",cluster, simplify = TRUE)
ids <- .jcall(clusterApplier, "[D", "getIdsOneDim",cluster, simplify = TRUE)
#if (class(ids)[[1]]!='list'){
#  ids <- split(ids, rep(1:nrow(ids), each = ncol(ids)))
#}
.jcheck()
listIds <- lapply(ids,function(x){max(x-min(unlist(ids[ids!=0])),0)})
result <- list()
counter <- 1
temp <- numeric()
for (elem in unlist(listIds)){
if (elem == 0){
result[[counter]] <- temp
counter <- counter + 1
temp <- numeric()
} else {
temp <- c(temp,elem)
}
}
result[[counter]] <- temp
result
}
getIdsDoc(cluster)
getIdsDoc <- function(cluster){
clusterApplier <- .jnew("ClusterApplier")
#ids <- .jcall(clusterApplier, "[[D", "getIds",cluster, simplify = TRUE)
ids <- .jcall(clusterApplier, "[D", "getIdsOneDim",cluster, simplify = TRUE)
#if (class(ids)[[1]]!='list'){
#  ids <- split(ids, rep(1:nrow(ids), each = ncol(ids)))
#}
.jcheck()
listIds <- lapply(ids,function(x){max(x-min(unlist(ids[ids!=0])),1)})
result <- list()
counter <- 1
temp <- numeric()
for (elem in unlist(listIds)){
if (elem == 0){
result[[counter]] <- temp
counter <- counter + 1
temp <- numeric()
} else {
temp <- c(temp,elem)
}
}
result[[counter]] <- temp
result
}
getIdsDoc(cluster)
getIdsDoc <- function(cluster){
clusterApplier <- .jnew("ClusterApplier")
#ids <- .jcall(clusterApplier, "[[D", "getIds",cluster, simplify = TRUE)
ids <- .jcall(clusterApplier, "[D", "getIdsOneDim",cluster, simplify = TRUE)
#if (class(ids)[[1]]!='list'){
#  ids <- split(ids, rep(1:nrow(ids), each = ncol(ids)))
#}
.jcheck()
listIds <- lapply(ids,function(x){max(x-min(unlist(ids[ids!=0]))+1,0)})
result <- list()
counter <- 1
temp <- numeric()
for (elem in unlist(listIds)){
if (elem == 0){
result[[counter]] <- temp
counter <- counter + 1
temp <- numeric()
} else {
temp <- c(temp,elem)
}
}
result[[counter]] <- temp
result
}
getIdsDoc(cluster)
.rs.restartR()
testDataFrame <- function(){
result <- data.frame(one=rep(NA,10),two=rep(NA,10),three=rep(NA,10),four=rep(NA,10),five=rep(NA,10))
result[1,] <- list(1,1,1,1,1)
result[2,] <- list(0,0,0,0,0)
result[3,] <- list(0,0,0,0,0)
result[4,] <- list(1,1,1,1,1)
result[5,] <- list(1,1,1,1,1)
result[6,] <- list(1,1,1,1,1)
result[7,] <- list(0,0,0,0,0)
result[8,] <- list(0,0,0,0,0)
result[9,] <- list(1,1,1,1,1)
result[10,] <- list(1,1,1,1,1)
result
}
data <- testDataFrame()
data
library(rJava)
runDoc <- function(data, alpha=0.2, beta=0.8, w=0.05){
initDoc()
clusterApplier <- .jnew("ClusterApplier")
arrayDouble <- .jcall(clusterApplier, "[[D", "matrix_from_array",as.vector(as.matrix(data)),ncol(data),evalArray=F)
result <- .jcall(clusterApplier, "[Lde/lmu/ifi/dbs/elki/data/Cluster;", "doc",.jarray(as.matrix(data), dispatch = TRUE),alpha,beta,w,evalArray = F)
result
}
getIdsDoc <- function(cluster){
clusterApplier <- .jnew("ClusterApplier")
#ids <- .jcall(clusterApplier, "[[D", "getIds",cluster, simplify = TRUE)
ids <- .jcall(clusterApplier, "[D", "getIdsOneDim",cluster, simplify = TRUE)
#if (class(ids)[[1]]!='list'){
#  ids <- split(ids, rep(1:nrow(ids), each = ncol(ids)))
#}
.jcheck()
listIds <- lapply(ids,function(x){max(x-min(unlist(ids[ids!=0]))+1,0)})
result <- list()
counter <- 1
temp <- numeric()
for (elem in unlist(listIds)){
if (elem == 0){
result[[counter]] <- temp
counter <- counter + 1
temp <- numeric()
} else {
temp <- c(temp,elem)
}
}
result[[counter]] <- temp
result
}
getDimsDoc <- function(cluster){
clusterApplier <- .jnew("ClusterApplier")
dims <- .jcall(clusterApplier, "[[D", "getDims",cluster, simplify = T)
.jcheck()
dims
}
getAvgsDoc <- function(cluster){
clusterApplier <- .jnew("ClusterApplier")
avgs <- .jcall(clusterApplier, "[[D", "getAverages",cluster, simplify = T)
.jcheck()
avgs
}
initDoc <- function(){
.jinit(".")
.jaddClassPath("dependencies/elki-clustering-0.7.5.jar")
.jaddClassPath("dependencies/elki-core-0.7.5.jar")
.jaddClassPath("dependencies/elki-core-api-0.7.5.jar")
.jaddClassPath("dependencies/elki-core-data-0.7.5.jar")
.jaddClassPath("dependencies/elki-core-dbids-0.7.5.jar")
.jaddClassPath("dependencies/elki-core-dbids-int-0.7.5.jar")
.jaddClassPath("dependencies/elki-core-distance-0.7.5.jar")
.jaddClassPath("dependencies/elki-core-math-0.7.5.jar")
.jaddClassPath("dependencies/elki-core-util-0.7.5.jar")
.jaddClassPath("dependencies/elki-database-0.7.5.jar")
.jaddClassPath("dependencies/elki-input-0.7.5.jar")
.jaddClassPath("dependencies/elki-logging-0.7.5.jar")
.jaddClassPath("dependencies/fastutil-8.2.2.jar")
.jaddClassPath("dependencies/jafama-2.3.1.jar")
.jaddClassPath("dependencies/Clust.jar")
#.jaddClassPath("C:\\Users\\Konstantin\\Programmierung\\javaBA\\out\\production\\javaBA\\Clust.jar")
#.jaddClassPath("C:\\Users\\Konstantin\\Downloads\\elki-0.7.5\\elki\\elki-clustering-0.7.5.jar")
#.jaddClassPath("C:\\Users\\Konstantin\\Downloads\\elki-0.7.5\\elki\\elki-core-0.7.5.jar")
#.jaddClassPath("C:\\Users\\Konstantin\\Downloads\\elki-0.7.5\\elki\\elki-core-api-0.7.5.jar")
#.jaddClassPath("C:\\Users\\Konstantin\\Downloads\\elki-0.7.5\\elki\\elki-core-data-0.7.5.jar")
#.jaddClassPath("C:\\Users\\Konstantin\\Downloads\\elki-0.7.5\\elki\\elki-core-dbids-0.7.5.jar")
#.jaddClassPath("C:\\Users\\Konstantin\\Downloads\\elki-0.7.5\\elki\\elki-core-dbids-int-0.7.5.jar")
#.jaddClassPath("C:\\Users\\Konstantin\\Downloads\\elki-0.7.5\\elki\\elki-core-distance-0.7.5.jar")
#.jaddClassPath("C:\\Users\\Konstantin\\Downloads\\elki-0.7.5\\elki\\elki-core-math-0.7.5.jar")
#.jaddClassPath("C:\\Users\\Konstantin\\Downloads\\elki-0.7.5\\elki\\elki-core-util-0.7.5.jar")
#.jaddClassPath("C:\\Users\\Konstantin\\Downloads\\elki-0.7.5\\elki\\elki-database-0.7.5.jar")
#.jaddClassPath("C:\\Users\\Konstantin\\Downloads\\elki-0.7.5\\elki\\elki-input-0.7.5.jar")
#.jaddClassPath("C:\\Users\\Konstantin\\Downloads\\elki-0.7.5\\elki\\elki-logging-0.7.5.jar")
#.jaddClassPath("C:\\Users\\Konstantin\\Downloads\\elki-0.7.5\\dependency\\fastutil-8.2.2.jar")
#.jaddClassPath("C:\\Users\\Konstantin\\Downloads\\elki-0.7.5\\dependency\\jafama-2.3.1.jar")
}
debugSource('C:/Users/Konstantin/Desktop/Uni/6Semester/BachelorArbeit/Code/doc.R')
doc <- runDoc(data)
getIdsDoc(doc)
getIdsDoc(doc)
testDataFrame <- function(){
result <- data.frame(one=rep(NA,10),two=rep(NA,10),three=rep(NA,10),four=rep(NA,10),five=rep(NA,10))
result[1,] <- list(1,1,1,1,1)
result[2,] <- list(0,0,0,0,0)
result[3,] <- list(0,0,0,0,0)
result[4,] <- list(1,1,1,1,1)
result[5,] <- list(1,1,1,1,1)
result[6,] <- list(1,1,1,1,1)
result[7,] <- list(1,1,1,1,1)
result[8,] <- list(0,0,0,0,0)
result[9,] <- list(1,1,1,1,1)
result[10,] <- list(0,0,0,0,0)
result
}
data <- testDataFrame()
doc <- runDoc(data)
getIdsDoc(doc)
.rs.restartR()
data <- testDataFrame()
doc <- runDoc(data)
getIdsDoc(doc)
.rs.restartR()
doc <- runDoc(data)
getIdsDoc(doc)
.rs.restartR()
